//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SADFM.Data
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class SADFMEntities : DbContext
    {
        public SADFMEntities()
            : base("name=SADFMEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Account> Accounts { get; set; }
        public virtual DbSet<Audit> Audits { get; set; }
        public virtual DbSet<FunderAccountPermission> FunderAccountPermissions { get; set; }
        public virtual DbSet<ListItem> ListItems { get; set; }
        public virtual DbSet<ListItemLabel> ListItemLabels { get; set; }
        public virtual DbSet<Message> Messages { get; set; }
        public virtual DbSet<MessageRecipient> MessageRecipients { get; set; }
        public virtual DbSet<Provider> Providers { get; set; }
        public virtual DbSet<ProviderAccountPermission> ProviderAccountPermissions { get; set; }
        public virtual DbSet<ProviderServiceTypeScale> ProviderServiceTypeScales { get; set; }
        public virtual DbSet<ScoreDefinition> ScoreDefinitions { get; set; }
        public virtual DbSet<Session> Sessions { get; set; }
        public virtual DbSet<VisitAttachment> VisitAttachments { get; set; }
        public virtual DbSet<VisitScore> VisitScores { get; set; }
        public virtual DbSet<AccountRole> AccountRoles { get; set; }
        public virtual DbSet<ScalePermission> ScalePermissions { get; set; }
        public virtual DbSet<Case> Cases { get; set; }
        public virtual DbSet<ProviderServiceType> ProviderServiceTypes { get; set; }
        public virtual DbSet<Patient> Patients { get; set; }
        public virtual DbSet<PatientSupportService> PatientSupportServices { get; set; }
        public virtual DbSet<FunderScheme> FunderSchemes { get; set; }
        public virtual DbSet<PatientScale> PatientScales { get; set; }
        public virtual DbSet<ScaleItemHeader> ScaleItemHeaders { get; set; }
        public virtual DbSet<PatientImpairmentGroupHistory> PatientImpairmentGroupHistories { get; set; }
        public virtual DbSet<PatientProvider> PatientProviders { get; set; }
        public virtual DbSet<Visit> Visits { get; set; }
        public virtual DbSet<UserFacility> UserFacilities { get; set; }
    
        public virtual int SetLabel(string language, string key, string label)
        {
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var keyParameter = key != null ?
                new ObjectParameter("Key", key) :
                new ObjectParameter("Key", typeof(string));
    
            var labelParameter = label != null ?
                new ObjectParameter("Label", label) :
                new ObjectParameter("Label", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SetLabel", languageParameter, keyParameter, labelParameter);
        }
    
        public virtual ObjectResult<GetVisitsAndScores_Result> GetVisitsAndScores(Nullable<System.Guid> patientId, Nullable<System.Guid> scaleId)
        {
            var patientIdParameter = patientId.HasValue ?
                new ObjectParameter("patientId", patientId) :
                new ObjectParameter("patientId", typeof(System.Guid));
    
            var scaleIdParameter = scaleId.HasValue ?
                new ObjectParameter("scaleId", scaleId) :
                new ObjectParameter("scaleId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetVisitsAndScores_Result>("GetVisitsAndScores", patientIdParameter, scaleIdParameter);
        }
    }
}
