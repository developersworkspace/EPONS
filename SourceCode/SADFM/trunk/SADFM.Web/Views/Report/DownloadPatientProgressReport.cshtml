@model SADFM.Data.Models.PatientProgressReport
@{
    Layout = null;
    string path = Request.Url.Host + (Request.Url.Port == 80 ? "" : ":" + Request.Url.Port.ToString());

    Model.Notes = Model.Notes.Where(x => !string.IsNullOrWhiteSpace(x.Body)).ToArray();
}

<style>
    .btn {
        padding: 6px 12px;
        margin-bottom: 0;
        font-size: 25px;
        font-weight: 700;
        line-height: 1.42857143;
        text-align: center;
        white-space: nowrap;
        vertical-align: middle;
        -ms-touch-action: manipulation;
        touch-action: manipulation;
        cursor: pointer;
        -webkit-user-select: none;
        -moz-user-select: none;
        -ms-user-select: none;
        user-select: none;
        background-image: none;
        border: 1px solid transparent;
        border-radius: 4px;
    }

    .blue {
        background-color: blue;
    }

    .orange {
        background-color: orange;
    }
</style>

<div>
    <div style="width: 18%; float:left">
        <img src="data:image/png;base64,@Convert.ToBase64String(System.IO.File.ReadAllBytes(Server.MapPath("/Content/images/report_logo.png")))" width="100%" />
        <img src="data:image/png;base64,@(Model.ProviderImage == null ? Convert.ToBase64String(System.IO.File.ReadAllBytes(Server.MapPath("/Content/images/noprovider.png"))) : Convert.ToBase64String(Model.ProviderImage))" width="100%" />
    </div>

    <div style="width: 54%; margin-left: 10%; float: left; ">
        <h4>
            Progress report
            <br />
            @Model.StartDate.ToString("dd MMM yyyy") - @Model.EndDate.ToString("dd MMM yyyy")
        </h4>
        <h3>@Model.Fullname</h3>
        <h5>
            Dob: @Model.DateOfBirth.ToString("dd MMM yyyy") (@Math.Floor((DateTime.Now.Subtract(Model.DateOfBirth).TotalDays / 365)))
            <br />
            @Model.Street
            <br />
            @Model.City
            <br />
            @Model.Country
            <br />
            @Model.PostalCode
        </h5>
    </div>
    <div style="width: 18%; float: left; ">
        <img src="data:image/png;base64,@(Model.ProfileImage == null ? Convert.ToBase64String(System.IO.File.ReadAllBytes(Server.MapPath("/Content/images/nopatient.png"))) : Convert.ToBase64String(Model.ProfileImage))" width="100%" />
    </div>
</div>

<div style="clear: left"></div>
@foreach (var entry in Model.ReferringDoctor.Where(x => !string.IsNullOrWhiteSpace(x.Name)))
{
    <div>
        <div style="display:inline-block; width:15%">
            <h4>Referring Doctor</h4>
        </div>
        <div style="display:inline-block; width:15%">
            @entry.Name
            <br />
            @entry.Email
            <br />
            @entry.Contact
        </div>
    </div>

}
<br />

<div style="clear: left"></div>
@foreach (var entry in Model.TreatingDoctor.Where(x => !string.IsNullOrWhiteSpace(x.Name)))
{
    <div>
        <div style="display:inline-block; width:15%">
            <h4>Treating Doctor</h4>
        </div>
        <div style="display:inline-block; width:15%">
            @entry.Name
            <br />
            @entry.Email
            <br />
            @entry.Contact
        </div>
    </div>

}


<div>
    <div style="width: 80%">
        <h4>Case Manager Notes</h4>
        @if (Model.Notes.Where(x => x.IsCaseManager).OrderBy(x => x.Timestamp).Count(x => !string.IsNullOrWhiteSpace(x.Body)) == 0)
        {
            <h5>No notes to display</h5>
        }
    </div>
</div>


@if (Model.Notes.Where(x => x.IsCaseManager).OrderBy(x => x.Timestamp).Count(x => !string.IsNullOrWhiteSpace(x.Body)) != 0)
{

    foreach (var entry in Model.Notes.Where(x => x.IsCaseManager).OrderBy(x => x.Timestamp))
    {
        <div>
            <div style="width: 15%; display: inline-block;">
                @entry.Timestamp.ToString("dd MMM yyyy HH:mm")
                <br />
                @entry.Clinician
            </div>
            <div style="width: 70%; display: inline-block;">
                @Html.Raw(Server.HtmlDecode(entry.Body))
            </div>

        </div>
        <br />
    }
}


<div>
    <div style="width: 80%">
        <h4>Diagnoses</h4>
    </div>
</div>

<div>
    <div style="width: 30%; display: inline-block;">
        ICD10
    </div>
    <div style="width: 15%; display: inline-block;">
        Start date
    </div>
    <div style="width: 15%; display: inline-block;">
        End date
    </div>
</div>

<br />
@foreach (var entry in Model.Diagnosis.OrderBy(x => x.EndDate.HasValue).ThenByDescending(x => x.StartDate))
{
    <div>
        <div style="width: 30%; display: inline-block; @(entry.EndDate.HasValue? "" : "color:red")">
            @(entry.EndDate.HasValue ? Html.Raw(entry.ICD10) : Html.Raw("<b>" + entry.ICD10 + "</b>"))
        </div>
        <div style="width: 15%; display: inline-block;">
            @entry.StartDate.ToString("dd MMM yyyy")
        </div>
        <div style="width: 15%; display: inline-block;">
            @(entry.EndDate.HasValue ? entry.EndDate.Value.ToString("dd MMM yyyy") : "")
        </div>
    </div>
    <br />
}

<br />
<div>
    <div style="width: 80%">
        <h4>Assessment Tools</h4>
    </div>
</div>

<div>
    <div style="width: 15%; display: inline-block;">
        Provider
    </div>
    <div style="width: 15%; display: inline-block;">
        Start date
    </div>
    <div style="width: 15%; display: inline-block;">
        End date
    </div>
    <div style="width: 15%; display: inline-block;">
        Scale
    </div>
    <div style="width: 15%; display: inline-block;">
        Frequency
    </div>
</div>
<br />

@foreach (var entry in Model.Careplans.Where(x => !string.IsNullOrWhiteSpace(x.Frequency)).OrderBy(x => x.EndDate.HasValue).ThenByDescending(x => x.StartDate))
{
    <div>
        <div style="width: 15%; display: inline-block;">
            @entry.Provider
        </div>
        <div style="width: 15%; display: inline-block;">
            @entry.StartDate.ToString("dd MMM yyyy")
        </div>
        <div style="width: 15%; display: inline-block;">
            @(entry.EndDate.HasValue ? Html.Raw(entry.EndDate.Value.ToString("dd MMM yyyy")) : Html.Raw("<span>&nbsp;</span>"))
        </div>
        <div style="width: 15%;display: inline-block;@(entry.EndDate.HasValue ? "" : "color:red;")">
            @(entry.EndDate.HasValue ? Html.Raw(entry.Name) : Html.Raw("<b>" + entry.Name + "</b>"))
        </div>
        <div style="width: 15%; display: inline-block;">
            @entry.Frequency
        </div>
    </div>
    <br />
}


<br />
<div>
    <div style="width: 80%">
        <h4>Multidisciplinary Team</h4>
    </div>
</div>

<div>
    <div style="width: 15%; display: inline-block;">
        Provider
    </div>
    <div style="width: 15%; display: inline-block;">
        Clinician
    </div>
    <div style="width: 15%; display: inline-block;">
        Role
    </div>
    <div style="width: 15%; display: inline-block;">
        Start date
    </div>
    <div style="width: 15%; display: inline-block;">
        End date
    </div>
</div>
<br />

@foreach (var entry in Model.MDTs.OrderBy(x => x.EndDate.HasValue).ThenByDescending(x => x.StartDate))
{
    <div>
        <div style="width: 15%; display: inline-block;">
            @entry.Provider
        </div>
        <div style="width: 15%; display: inline-block;@(entry.EndDate.HasValue ? "" : "color:red")">
            @(entry.EndDate.HasValue ? Html.Raw(entry.Clinician) : Html.Raw("<b>" + entry.Clinician + "</b>"))
        </div>
        <div style="width: 15%; display: inline-block;">
            @string.Join(", ", entry.Roles)
        </div>
        <div style="width: 15%; display: inline-block;">
            @entry.StartDate.ToString("dd MMM yyyy")
        </div>
        <div style="width: 15%; display: inline-block;">
            @(entry.EndDate.HasValue ? entry.EndDate.Value.ToString("dd MMM yyyy") : "")
        </div>
    </div>
    <br />
}


<br />
<div>
    <div style="width: 80%">
        <h4>Support Services</h4>
    </div>
</div>

<div>
    <div style="width: 15%; display: inline-block;">
        Service
    </div>
    <div style="width: 15%; display: inline-block;">
        Note
    </div>
</div>
<br />

@foreach (var entry in Model.SupportServices)
{
    <div>
        <div style="width: 15%; display: inline-block;">
            @entry.Name
        </div>
        <div style="width: 15%; display: inline-block;">
            @entry.Note
        </div>
    </div>
    <br />
}

<br />
<div>
    <div style="width: 80%">
        <h4>Notes</h4>
        @if (Model.Notes.Where(x => !x.IsCaseManager).OrderBy(x => x.Timestamp).Count(x => !string.IsNullOrWhiteSpace(x.Body)) == 0)
        {
            <h5>No notes to display</h5>
        }
    </div>
</div>


@if (Model.Notes.Where(x => !x.IsCaseManager).OrderBy(x => x.Timestamp).Count(x => !string.IsNullOrWhiteSpace(x.Body)) != 0)
{

    if (Model.GroupedNotes)
    {
        foreach (var entry in Model.Notes.Where(x => !x.IsCaseManager).GroupBy(x => x.Group))
        {

            <div>
                <div style="width: 15%; display: inline-block;">
                    <b>@entry.Key</b>
                </div>
            </div>
            <br />
            foreach (var entry1 in entry.OrderBy(x => x.Timestamp))
            {
                <div>
                    <div style="width: 15%; display: inline-block;">
                        @entry1.Timestamp.ToString("dd MMM yyyy HH:mm")
                        <br />
                        @entry1.Clinician
                        <br />
                        @entry1.Group
                    </div>
                    <div style="width: 70%;display: inline-block;">
                        @Html.Raw(Server.HtmlDecode(entry1.Body))
                    </div>

                </div>
                <br />
            }

        }
    }
    else
    {
        foreach (var entry in Model.Notes.Where(x => !x.IsCaseManager).OrderBy(x => x.Timestamp))
        {
            <div>
                <div style="width: 15%; display: inline-block;">
                    @entry.Timestamp.ToString("dd MMM yyyy HH:mm")
                    <br />
                    @entry.Clinician
                    <br />
                    @entry.Group
                </div>
                <div style="width: 70%; display: inline-block;">
                    @Html.Raw(Server.HtmlDecode(entry.Body))
                </div>

            </div>
            <br />
        }
    }
}



<br />
@foreach (var entry in Model.Careplans.GroupBy(x => new { x.Name, x.ScaleID }).ToList())
{
    <div>
        <div>
            <h3>@entry.Key.Name</h3>
        </div>
        <div id="line-container-@entry.Key.Name" data-name='@entry.Key.Name' data-id="@entry.Key.ScaleID" data-type="AllVisitsLine" style="width: 80%;"></div>

        @if (entry.Key.Name != "Vital Signs")
{
    <div id="polar-container-@entry.Key.Name" data-name='@entry.Key.Name' data-id="@entry.Key.ScaleID" data-type="Polar" style="width: 80%;"></div>
}


    </div>
}

@if (!ViewBag.Save)
{

    <div style="position:fixed;top: 10px;right: 30px">
        <button class="btn blue" onclick="PrintPDF()">Download</button>
        <button class="btn orange" onclick="window.location = '/Report/PatientProgressReport/@Request["Id"]'">Close</button>
    </div>
}
@Scripts.Render("~/bundles/jquery")
@Scripts.Render("~/plugins/HighCharts")
@Scripts.Render("~/plugins/HighCharts-More")
@Scripts.Render("~/plugins/html2canvas")
@Scripts.Render("~/plugins/Canvg")
@Scripts.Render("~/bundles/bootstrap")

<script src="~/Scripts/plugins/print/jspdf.min.js"></script>
<script>


    $(document).ready(function () {


        $('#btn-download').button('loading');
        setTimeout(function () {
            $('#btn-download').button('reset');

            @if (ViewBag.Save)
            {
                <text>
            SavePDF();
            </text>
            }

        }, 2800);



        $.extend(
               {
                   redirectPost: function (location, args) {
                       var form = '';
                       $.each(args, function (key, value) {
                           value = value.split('"').join('\"')
                           form += '<input type="hidden" name="' + key + '" value="' + value + '">';
                       });
                       $('<form action="' + location + '" method="POST">' + form + '</form>').appendTo($(document.body)).submit();
                   }
               });


        @foreach (var entry in Model.Careplans)
        {
            <text>
        RenderGraph('@entry.Name', '@entry.ScaleID','@entry.Name', 'AllVisitsLine');

        @if (entry.Name != "Vital Signs") {
            <text>
        RenderGraph('@entry.Name', '@entry.ScaleID','@entry.Name', 'Polar');
        </text>
        }


        </text>
        }

    });


    function RenderGraph(name, scaleId,scaleName, graphType) {
        $.ajax({
            url: "/Report/GraphData",
            data: {
                PatientId: '@Model.PatientId.ToString("N")',
                ScaleID: scaleId,
                GraphType: graphType,
            },
            type: "POST",
            dataType: "json",
            success: function (data) {

                draw(data, scaleId,scaleName, graphType);

            },
            error: function () {

            }
        });
    }

    function PrintPDF() {

        var form = '';
        var count = 0;

        form += '<input type="hidden" name="' + 'id' + '" value="' + '@Model.PatientId.ToString()' + '">';
        form += '<input type="hidden" name="' + 'StartDate' + '" value="' + '@Request["StartDate"]' + '">';
        form += '<input type="hidden" name="' + 'EndDate' + '" value="' + '@Request["EndDate"]' + '">';
        form += '<input type="hidden" name="' + 'GroupedNotes' + '" value="' + '@Model.GroupedNotes' + '">';

        $('div').each(function (index) {

            if ($(this).attr('data-id') != null) {

                form += '<input type="hidden" name="' + 'Scales[' + count + '].ScaleId' + '" value="' + $(this).attr('data-id') + '">';
                form += '<input type="hidden" name="' + 'Scales[' + count + '].GraphType' + '" value="' + $(this).attr('data-type') + '">';
                form += '<input type="hidden" name="' + 'Scales[' + count + '].Base64' + '" value="' + GetDataUri($(this)) + '">';

                count++;
            }

        });


        $('<form action="' + "@Url.Action("DownloadPatientProgressReportFile","Report")" + '" method="POST">' + form + '</form>').appendTo($(document.body)).submit();

    }

    function SavePDF() {

        setTimeout(function () {
            try {
                var form = '';
                var count = 0;

                form += '<input type="hidden" name="' + 'id' + '" value="' + '@Model.PatientId.ToString()' + '">';
                form += '<input type="hidden" name="' + 'StartDate' + '" value="' + '@Request["StartDate"]' + '">';
                form += '<input type="hidden" name="' + 'EndDate' + '" value="' + '@Request["EndDate"]' + '">';
                form += '<input type="hidden" name="' + 'GroupedNotes' + '" value="' + '@Model.GroupedNotes' + '">';
                form += '<input type="hidden" name="' + 'reportID' + '" value="' + '@ViewBag.ReportId' + '">';
                form += '<input type="hidden" name="' + 'save' + '" value="' + '@ViewBag.Save' + '">';

                $('div').each(function (index) {

                    if ($(this).attr('data-id') != null) {

                        form += '<input type="hidden" name="' + 'Scales[' + count + '].ScaleId' + '" value="' + $(this).attr('data-id') + '">';
                        form += '<input type="hidden" name="' + 'Scales[' + count + '].GraphType' + '" value="' + $(this).attr('data-type') + '">';
                        form += '<input type="hidden" name="' + 'Scales[' + count + '].Base64' + '" value="' + GetDataUri($(this)) + '">';

                        count++;
                    }

                });


                $('<form action="' + "@Url.Action("DownloadPatientProgressReportFile","Report")" + '" method="POST">' + form + '</form>').appendTo($(document.body)).submit();
            }catch(e) {
                SavePDF();
            }
        }, 2000);


       
    }



    function GetDataUri(element) {

        $('#canvas').remove();
        var canvas = document.createElement('canvas');
        canvas.id = "canvas";
        canvas.width = 1224;
        canvas.height = 768;
        canvas.style.zIndex = 8;
        canvas.style.position = "absolute";
        canvas.style.border = "1px solid";
        canvas.style.display = "none"
        document.body.appendChild(canvas);
        canvg(document.getElementById('canvas'), $(element).find('svg').parent().html());

        var URL = canvas.toDataURL();
        return URL;
    }

    function draw(data, scaleId,scaleName, graphType) {

        $('div').each(function (index) {

            if ($(this).attr('data-id') != null) {
                if ($(this).attr('data-id') == scaleId && $(this).attr('data-type') == graphType) {


                    if (graphType == 'Polar') {

                        if (data == null || data.Data.length == 0) {
                            $(this).remove();
                            return;
                        }

                        for (i = 0; i < data.Data.length; i++) {
                            var scoreSum = 0;
                            for (j = 0; j < data.Data[i].points.length; j++) {
                                scoreSum += data.Data[i].points[j];
                            }


                            data.Data[i].fullTitle = data.Data[i].title + ' - Total Score = ' + scoreSum + ' / ' + (data.labels.length * (scaleName == 'APOM' ? 18 : 7));
                        }

                        dataSet = new Array();
                        color = new Array("255,37,37", "49,134,155", "0,176,80");
                        for (i = 0; i < data.Data.length; i++)
                            if (data.Data.length >= 1) {
                                dataSet.unshift({
                                    name: data.Data[i].title,
                                    fullTitle: data.Data[i].fullTitle,
                                    data: data.Data[i].points,
                                    pointPlacement: 'on',
                                    fillColor: "rgba(" + color[i] + ",0.2)",
                                    color: "rgba(" + color[i] + ",1)",
                                    marker: {
                                        symbol: "circle"
                                    }
                                });
                            }

                        $(this).highcharts({

                            chart: {
                                polar: true,
                                type: 'area',
                                height: 800
                            },

                            title: {
                                text: null
                            },

                            xAxis: {
                                categories: data.labels,
                                tickmarkPlacement: 'on',
                                lineWidth: 0,
                                labels: {
                                    style: {
                                        color: 'red',
                                        fontSize: '15px'
                                    }
                                }
                            },

                            yAxis: {
                                gridLineInterpolation: 'polygon',
                                lineWidth: 0,
                                tickInterval: 1,
                                min: 0,
                                ceiling: scaleName == 'APOM' ? 18 : 7,
                                max: scaleName == 'APOM' ? 18 : 7,
                                showFirstLabel: false,
                                showLastLabel: true,
                                labels: {
                                    style: {
                                        color: 'red',
                                        fontSize: '15px'
                                    }
                                }
                            },

                            tooltip: {
                                shared: true,
                                pointFormat: '<span style="color:{series.color}">{series.name}: {point.y:,.0f}<br/>'
                            },

                            legend: {
                                align: 'left',
                                verticalAlign: 'top',
                                layout: 'horizontal',
                                labelFormatter: function () {
                                    return this.userOptions.fullTitle;
                                },
                                itemStyle: {
                                    font: '13pt Arial'
                                }
                            },

                            series: dataSet

                        });


                    } else {

                        var valid = false;

                        for (i = 0; i < data.Data.length; i++) {
                            var x = data.Data[i];

                            if (x.data.length > 0) {
                                valid = true;
                                break;
                            }

                        }

                        if (!valid) {
                            $(this).remove();
                            return;
                        }

                        $(this).highcharts({
                            chart: {
                                type: 'spline'
                            },
                            title: {
                                text: ''
                            },
                            subtitle: {
                                text: ''
                            },
                            xAxis: {
                                type: 'datetime',
                                dateTimeLabelFormats: { // don't display the dummy year
                                    month: '%e. %b',
                                    year: '%b'
                                },
                                title: {
                                    text: 'Date'
                                }
                            },
                            yAxis: {
                                title: {
                                    text: ''
                                },
                                min: 0
                            },
                            tooltip: {
                                headerFormat: '<b>{series.name}</b><br>',
                                pointFormat: '{point.x:%e. %b}: {point.y:.1f}'
                            },

                            plotOptions: {
                                spline: {
                                    marker: {
                                        enabled: true
                                    }
                                }
                            },

                            series: data.Data
                        });
                    }


                }
            }


        });

    }

</script>