@using SADFM.Web.Shared
@{
    ViewBag.Title = "Users";
    ViewBag.Account = UserHelper.GetCurrentAccount();
}
<style>
    .chosen-container .chosen-drop .chosen-results {
        height: 90px;
    }
</style>
<div class="row wrapper border-bottom white-bg page-heading">
    <div class="col-lg-10">
        <h2>User maintenance</h2>
        <ol class="breadcrumb">
            <li>
                <a href="@Url.Action("Index", "Home")">Home</a>
            </li>
            <li>
                <a>Administration</a>
            </li>
            <li class="active">
                <strong>Users</strong>
            </li>
        </ol>
    </div>
    <div class="col-lg-2">
    </div>
</div>
<div class="wrapper wrapper-content animated fadeInRight">
    <div class="row">
        <div class="col-lg-12">
            <div class="ibox float-e-margins">
                <div class="ibox-title">
                    <h5>SADFM System Users</h5>

                    @if (ViewBag.Account.AccountType == "SuperAdmin")
                    {
                        <div class="ibox-tools">
                            <button type="button" class="btn btn-warning" data-toggle="modal" data-backdrop="static" data-keyboard="false" id="btnImportMoodle">
                                <i class="fa fa-university"></i>&nbsp;Import Accreditation
                            </button>
                            <button type="button" class="btn btn-warning" data-toggle="modal" data-backdrop="static" data-keyboard="false" id="btnImportManually">
                                <i class="fa fa-pencil-square-o"></i>&nbsp;Manual Moodle Import
                            </button>
                            <button type="button" class="btn btn-primary btn-addusers" data-toggle="modal" data-backdrop="static" data-keyboard="false">
                                <i class="fa fa-plus"></i>&nbsp;Add users
                            </button>
                        </div>
                    }
                </div>
                <div class="ibox-content">

                    <table class="table table-striped table-bordered table-hover" id="tblUserList">
                        <thead>
                            <tr>
                                <th></th>
                                <th>@Library.GetText("FirstNameLabel")</th>
                                <th>Surname</th>
                                <th>Email Address</th>
                                <th>Username</th>
                                <th>Status</th>
                                <th>Permissions</th>
                                <th>Action</th>
                            </tr>
                        </thead>
                        <tfoot>
                            <tr>
                                <th></th>
                                <th>@Library.GetText("FirstNameLabel")</th>
                                <th>Surname</th>
                                <th>Email Address</th>
                                <th>Username</th>
                                <th>Status</th>
                                <th>Permissions</th>
                                <th>Action</th>
                            </tr>
                        </tfoot>
                    </table>

                </div>
            </div>
        </div>
    </div>
</div>

<div class="modal inmodal" id="importMoodleManually" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content animated">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">&times;</span><span class="sr-only">Close</span></button>
                <h4 class="modal-title">Manual Moodle Import</h4>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-xs-4">
                        Username
                    </div>
                    <div class="col-xs-6">
                        <input id="username" placeholder="Enter username" autocomplete="off" type="text" class="form-control">
                    </div>
                </div>
                <div class="row">
                    <div class="col-xs-4">
                        Scale
                    </div>
                    <div class="col-xs-6">
                        @SADFM.Web.Shared.HtmlHelper.DropdownBox(
                        SADFM.Data.DataAccess.ListItem.GetList("Scale", deep: false).Where(li => li.Description != "Vital Signs").ToList()
                        , "ScaleID", l => l.ID, l => l.Description, "chosen-select", dataPlaceholder: "Choose a scale")
                    </div>
                </div>
                <div class="row">
                    <div class="col-xs-4">
                        Grade
                    </div>
                    <div class="col-xs-6">
                        <input id="grade" placeholder="Enter grade" autocomplete="off" type="text" class="form-control">
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-white" data-dismiss="modal">Cancel</button>
                <button type="button" class="btn" id="importMoodleManuallyOK">Import</button>
            </div>
        </div>
    </div>
</div>

<div class="modal inmodal" id="importMoodle" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content animated">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">&times;</span><span class="sr-only">Close</span></button>
                <h4 class="modal-title">Import Moodle Exam Results</h4>
            </div>
            <div class="modal-body">
                <table class="table table-striped table-bordered table-hover" id="tblImportMoodle">
                    <thead>
                        <tr>
                            <th>Import</th>
                            <th>Scale</th>
                            <th>Email Address</th>
                            <th>User</th>
                            <th>Grade</th>
                        </tr>
                    </thead>
                </table>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-white" data-dismiss="modal">Cancel</button>
                <button type="button" class="btn" id="importMoodleOK">OK</button>
            </div>
        </div>
    </div>
</div>

<div class="modal inmodal modal-wide" id="popupEditor" tabindex="-1" role="dialog" aria-hidden="true" data-backdrop="static" data-keyboard="false" style="display: none;">
    <div class="modal-dialog">
        <div class="modal-content animated fadeIn">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">×</span><span class="sr-only">Close</span></button>
                <h4 class="modal-title">Add new Users</h4>
            </div>
            <div class="modal-body">
                <form id="form" action="#" class="wizard-big">
                    <h1>Client</h1>
                    <fieldset>
                        <h2>Select the client</h2>
                        <div class="row">
                            <div class="col-lg-12" id="clients">
                            </div>
                        </div>
                    </fieldset>

                    <h1>Permissions</h1>
                    <fieldset>
                        <h2>Select permissions</h2>
                    </fieldset>

                    <h1>User info</h1>
                    <fieldset>
                        <div class="row">
                            <div class="col-lg-7">
                                <h2>Add the users</h2>
                            </div>
                            <div class="col-lg-2">
                                <button type="button" class="btn btn-primary btn-addnewuser">Add</button>
                            </div>
                            <div class="col-lg-3">
                                <label title="Upload" for="inputCsv" class="btn btn-primary" style="max-width: initial;">
                                    <input type="file" accept="text/csv" name="file" id="inputCsv" class="hide">
                                    Upload
                                </label>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-lg-12">
                                <table id="tblNewUsers" class="table table-striped table-bordered table-hover">
                                    <thead>
                                        <tr>
                                            <th>@Library.GetText("FirstNameLabel")</th>
                                            <th>Surname</th>
                                            <th>Email Address</th>
                                            <th>Username</th>
                                            <th>X</th>
                                        </tr>
                                    </thead>
                                </table>
                            </div>
                        </div>
                    </fieldset>

                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-white btn-closedialog">Cancel</button>
                <button type="button" class="btn btn-primary btn-newnext disabled">Next</button>
                <button type="button" class="btn btn-primary btn-newsave disabled">Save</button>
            </div>
        </div>
    </div>
</div>






<div class="modal inmodal" id="popupEdit" tabindex="-1" role="dialog" aria-hidden="true" data-backdrop="static" data-keyboard="false" style="display: none;">
    <div class="modal-dialog">
        <div class="modal-content animated fadeIn">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">×</span><span class="sr-only">Close</span></button>
                <h4 class="modal-title">#</h4>
            </div>
            <div class="modal-body">
                <form class="form-horizontal">
                    <div class="form-group">
                        <label class="col-lg-3 control-label">@Library.GetText("FirstNameLabel")</label>
                        <div class="col-lg-9">
                            <input type="text" id="editFirstName" style="width: 100%" placeholder="@Library.GetText("FirstNameLabel")" />
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="col-lg-3 control-label">Surname</label>
                        <div class="col-lg-9">
                            <input type="text" id="editLastName" style="width: 100%" placeholder="Surname" />
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="col-lg-3 control-label">Email Address</label>
                        <div class="col-lg-9">
                            <input type="email" id="editEmailAddress" style="width: 100%" placeholder="Email Address" />
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="col-lg-3 control-label">Username</label>
                        <div class="col-lg-9">
                            <input type="text" id="editUsername" style="width: 100%" placeholder="Username" />
                        </div>
                    </div>
                    <input type="hidden" id="ID" /><input type="hidden" id="AGE" />
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-white" data-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary btn-editsave">Save</button>
            </div>
        </div>
    </div>
</div>
@section Styles {
    @Styles.Render("~/plugins/dataTablesStyles")
    @Styles.Render("~/plugins/wizardStepsStyles")
    @Styles.Render("~/plugins/chosenStyles")
    @Styles.Render("~/plugins/switcheryStyles")
    <style>
        td.details-control {
            background: url('../Content/images/details_open.png') no-repeat center center;
            cursor: pointer;
        }

        tr.shown td.details-control {
            background: url('../Content/images/details_close.png') no-repeat center center;
        }
    </style>
}

@section Scripts {
    @Scripts.Render("~/plugins/jeditable")
    @Scripts.Render("~/plugins/dataTables")
    @Scripts.Render("~/plugins/wizardSteps")
    @Scripts.Render("~/plugins/chosen")
    @Scripts.Render("~/plugins/switchery")
    <script type="text/javascript">
        $(document).ready(function () {

            $("#btnImportManually").click(function () {

                $('#ScaleID').val('');
                $('#grade').val('');
                $('#username').val('');

                $('#ScaleID').val('');
                $('#ScaleID').trigger("chosen:updated");

                $("#importMoodleManually").modal("show");
            });

            $("#importMoodleManuallyOK").click(function () {


                if (!isNaN($('#grade').val())) {
                    if ($('#grade').val() > 100 || $('#grade').val() < 0) {
                        $.fn.jAlert({
                            'title': 'Error!',
                            'message': 'Please enter a grade ranging from 0-100.',
                            'theme': 'error'
                        });
                        return;
                    }
                } else {
                    $.fn.jAlert({
                        'title': 'Error!',
                        'message': 'Please enter numeric values only.',
                        'theme': 'error'
                    });
                    return;
                }
                $("#importMoodleManually").modal("hide");

                var model = {
                    "ScaleId": $('#ScaleID').val(),
                    "Grade": $('#grade').val(),
                    "Username": $('#username').val()
                }

                Post("/Administration/MoodleManuaImport", model,
                                function () {

                                });
            });



            $(".chosen-select").chosen({
                "width": "100%",
                disable_search_threshold: 5
            });


            $('#importMoodleOK').click(function () {

                $("#importMoodle").modal("hide");
                var importUsers = new Array();

                var users = $('#tblImportMoodle').DataTable().rows().data();
                for (i = 0; i < users.length; i++) {
                    if ($($("#tblImportMoodle").dataTable().fnGetNodes()[i]).children('td').children('input').prop("checked")) {
                        importUsers.push(users[i])
                    }
                }

                $.ajax({
                    method: "POST",
                    url: "/Administration/ImportAccreditation",
                    data: { model: importUsers }
                })
              .done(function (msg) {

              });


            });


            $('#tblImportMoodle').dataTable({
                "processing": true,
                "serverSide": true,
                "scrollX": true,
                "ajax": {
                    "url": "/Administration/AccreditationList",
                    "type": "POST"
                },
                "oLanguage": {
                    "sProcessing": "<img src='/Images/loading.gif' height='25'/>"
                },
                "columns": [
                {
                    "orderable": false,
                    "data": null,
                    "defaultContent": '<input type=checkbox>'
                },
                { "data": "ScaleCode" },
                { "data": "EmailAddress" },
                { "data": "Username" },
                { "data": "GradeDisplay" }],
                "drawCallback": function (settings) {


                    var users = $('#tblImportMoodle').DataTable().rows().data();
                    for (i = 0; i < users.length; i++) {
                        if (users[i].UserMatched == "False") {
                            $($("#tblImportMoodle").dataTable().fnGetNodes()[i]).css('background-color', '#CC8987');
                            $($("#tblImportMoodle").dataTable().fnGetNodes()[i]).children('td').children('input').attr("disabled", true);
                        }

                    }



                }

            });


            $("#btnImportMoodle").click(function () {
                $('#tblImportMoodle').DataTable().ajax.reload();
                $("#importMoodle").modal("show");

            });


            $('#tblUserList').dataTable({
                "processing": true,
                "serverSide": true,
                "ajax": {
                    //"url": "/Administration/UserList?AccountId=@ViewBag.Account.GetId()&Type=@ViewBag.Account.AccountType" + "StartIndex=0&Length=10",
                    "type": "GET",
                },
                "fnServerData": function (sSource, aoData, fnCallback, oSettings) {
                    oSettings.jqXHR = $.ajax({
                        "dataType": 'json',
                        "type": "POST",
                        "url": "/Administration/UserList",
                        "data": {
                            "AccountId": '@ViewBag.Account.GetId()',
                            "Type": '@ViewBag.Account.AccountType',
                            "StartIndex": $("#tblUserList").dataTable().fnSettings()._iDisplayStart,
                            "Search": $("#tblUserList").dataTable().fnSettings().oPreviousSearch.sSearch,
                            "ColumnSort": $("#tblUserList").dataTable().fnSettings().aaSorting[0][0],
                            "Direction": $("#tblUserList").dataTable().fnSettings().aaSorting[0][1],
                            "Length": $("#tblUserList").dataTable().fnSettings()._iDisplayLength,
                            "draw": $("#tblUserList").dataTable().fnSettings().iDraw

                        },
                        "success": fnCallback,
                        "error": function (e) {

                        }
                    });
                },
                "oLanguage": {
                    "sProcessing": "<img src='/Images/loading.gif' height='25'/>"
                },
                "order": [[0, "asc"]],
                "bAutoWidth": false,
                "columns": [
                    {
                        "className": 'details-control',
                        "orderable": false,
                        "data": null,
                        "defaultContent": ''
                    },
                    { "data": "FirstName" },
                    { "data": "LastName" },
                    { "data": "EmailAddress" },
                    { "data": "Username" },
                    { "data": "Status" },
                      { "data": "Permissions" },
                    { "data": null, orderable: false, defaultContent: "<button class='btn btn-sm btn-primary btn-edit'>Edit</button>&nbsp;<button class='btn btn-sm btn-warning btn-enabledisable'><i class='fa fa-lock'></i></button>", sClass: "right" }],
                @*"dom": 'T<"clear">lfrtip',
                "tableTools": {
                    "sSwfPath": "../scripts/plugins/dataTables/swf/copy_csv_xls_pdf.swf"
                }*@
                "drawCallback": function () {
                    $(".btn-edit").click(function () {
                        window.location = "User/" + $('#tblUserList').DataTable().row($(this).closest('tr')).data().Username;
                    });

                    $(".btn-enabledisable").click(function () {
                        var Name = $('#tblUserList').DataTable().row($(this).closest('tr')).data().FirstName;
                        var id = $('#tblUserList').DataTable().row($(this).closest('tr')).data().ID;
                        var active = $('#tblUserList').DataTable().row($(this).closest('tr')).data().Status == "Active";
                        var statusText;
                        var statusTextInverse;

                        if (active) {
                            statusText = "Active";
                            statusTextInverse = "Inactive";
                        } else {
                            statusText = "Inactive";
                            statusTextInverse = "Active";
                        }

                        if (id == '@ViewBag.Account.ID') {
                            alert('Cannot disable own account.');
                        } else {
                            ConfirmDialog("Change status for " + Name, "Do you want to set status from <b style='color:red'>" + statusText + "</b> to <b style='color:red'>" + statusTextInverse + "</b>", function () {

                                Post("/Account/ChangeStatus", {
                                    id: id,
                                    active: !active
                                }, function () {
                                    $('#tblUserList').DataTable().ajax.reload();
                                    HideConfirmDialog();
                                });



                            }, "btn-danger");

                        }
                    });

                }
            });

            $('.dataTables-example tbody').on('click', 'td.details-control', function () {
                var tr = $(this).closest('tr');
                var row = $('#tblUserList').DataTable().row(tr);

                if (row.child.isShown()) {
                    // This row is already open - close it
                    row.child.hide();
                    tr.removeClass('shown');
                }
                else {
                    // Open this row
                    row.child(format(row.data())).show();
                    tr.addClass('shown');
                }
            });

            /* Formatting function for row details - modify as you need */
            function format(d) {
                // `d` is the original data object for the row
                var res = '<h4><u>Permissions</u></h4>';
                if (d.Permissions.length == 0)
                    return res + "--- None ---";
                var perm = d.Permissions.split("\n");
                for (i = 0; i < perm.length; i++) {
                    var pp = perm[i].split("\t");
                    res = res + "<p><b>" + pp[0] + "</b>&nbsp;=&nbsp;" + pp[1] + "</p>";
                }
                return res;
            }

            $(".btn-addusers").click(function () {




                $("#form").steps({
                    bodyTag: "fieldset",
                    enableFinishButton: false,
                    enablePagination: false,
                    forceMoveForward: true,
                    onCancelled: function () {
                        $("#form").steps("destroy");
                    }
                });

                $(".btn-newnext").unbind("click");
                $(".btn-newnext").bind("click", function () {
                    switch ($("#form").steps("getCurrentIndex")) {
                        case 0:
                            var clientType = $("#ddlClient option:selected").attr("Type");
                            $.ajax({
                                url: "/Administration/UserPermissionList",
                                type: "POST",
                                data: "ClientType=" + clientType,
                                success: function (data) {
                                    $("fieldset#form-p-1 div").remove();
                                    for (i = 0; i < data.length; i++) {
                                        $("fieldset#form-p-1").append("<div class='row'><div class='col-lg-2'><input type='checkbox' id='permission" + i + "' value='" + data[i].ID + "'></div><div class='col-lg-10'>" + data[i].Description + "</div></div>");
                                        new Switchery(document.querySelector('#permission' + i));
                                    }
                                    $("#form").steps("next");
                                },
                                error: function () {
                                    alert("Cannot determine permissions for client type " + clientType);
                                }
                            });
                            break;
                        case 1:
                            if ($("#form-p-1 input[type=checkbox]:checked").length == 0) {
                                alert("Check the permissions for the new users");
                                return;
                            }
                            $("#form").steps("next");
                            $(".btn-newnext").addClass("disabled");
                            $("#tblNewUsers").dataTable(
                                {
                                    paging: false,
                                    scrollY: "150px",
                                    scrollCollapse: true,
                                    ordering: false,
                                    searching: false,
                                    info: false,
                                    autoWidth: false,
                                    language: {
                                        emptyTable: "Add single or upload bulk"
                                    },
                                    columns: [
                                        { "data": "FirstName" },
                                        { "data": "LastName" },
                                        { "data": "EmailAddressDisplay" },
                                        { "data": "UserDisplay" },
                                        { "data": null, orderable: false, defaultContent: "<button class='btn btn-danger btn-sm btn-dropnew' type='button'>x</button>" }],
                                    drawCallback: function () {
                                        $(".btn-dropnew").click(function () {
                                            $('#tblNewUsers').DataTable().row($(this).closest('tr')).remove();
                                            $("#tblNewUsers").DataTable().rows().invalidate().draw();
                                        });
                                    }
                                });

                            $('#tblNewUsers').DataTable().clear().draw();

                            $(".btn-addnewuser").unbind("click");
                            $(".btn-addnewuser").bind("click", function () {
                                AEDPopup("", "", "", "", "", "");
                            });

                            $(".btn-editsave").unbind("click");
                            $(".btn-editsave").bind("click", function () {
                                if ($("#editFirstName").val().length == 0 || $("#editLastName").val().length == 0 || $("#editEmailAddress").val().length == 0 || $("#editUsername").val().length == 0) {
                                    $.fn.jAlert({
                                        'title': 'Error!',
                                        'message': 'Enter data for all the fields',
                                        'theme': 'error'
                                    });
                                    return;
                                }
                                AddNewUser($("#editFirstName").val(), $("#editLastName").val(), $("#editEmailAddress").val(), $("#editUsername").val());
                                $("#tblNewUsers").DataTable().draw();
                                VerifyUsernames();
                                $("#popupEdit").modal("hide");
                            });

                            $("#inputCsv").unbind("change");
                            $("#inputCsv").bind("change", function () {
                                var fileReader = new FileReader(),
                                        files = this.files,
                                        file;

                                if (!files.length) {
                                    return;
                                }

                                file = files[0];

                                if (file.name.endsWith(".csv") ||file.type == "text/csv" || file.type == "application/vnd.ms-excel") {
                                    fileReader.onload = function () {
                                        var strings = CSVToArray(this.result);
                                        if (strings.length == 0)
                                            return;
                                        var firstnameIx = -1, lastnameIx = -1, emailIx = -1, usernameIx = -1;
                                        for (i = 0; i < strings[0].length; i++)
                                            if (strings[0][i].toLowerCase().indexOf("first") > -1)
                                                firstnameIx = i;
                                            else if (strings[0][i].toLowerCase().indexOf("last") > -1)
                                                lastnameIx = i;
                                            else if (strings[0][i].toLowerCase().indexOf("username") > -1)
                                                usernameIx = i;
                                            else if (strings[0][i].toLowerCase().indexOf("email") > -1)
                                                emailIx = i;

                                        if (usernameIx == -1 || firstnameIx == -1 || lastnameIx == -1 || emailIx == -1) {
                                            alert("Ensure that you have the the following fields:\n-Firstname\n-Lastname\n-Username\n-EmailAddress");
                                            return;
                                        }
                                        $("#tblNewUsers").DataTable().clear();
                                        for (i = 1; i < strings.length; i++)
                                            AddNewUser(strings[i][firstnameIx], strings[i][lastnameIx], strings[i][emailIx], strings[i][usernameIx]);
                                        $("#tblNewUsers").DataTable().draw();
                                        VerifyUsernames();
                                    };
                                    fileReader.readAsText(file);
                                } else {
                                    alert("Please choose a CSV file.");
                                }
                                $("#inputCsv").val("");
                            });


                            break;
                    }
                });

                $(".btn-newsave").unbind("click");
                $(".btn-newsave").bind("click", function () {
                    var rowdata = $("#tblNewUsers").DataTable().data();
                    var sendData = new Array();
                    for (i = 0; i < rowdata.length; i++)
                        sendData.push({
                            FirstName: rowdata[i].FirstName,
                            LastName: rowdata[i].LastName,
                            EmailAddress: rowdata[i].EmailAddress,
                            Username: rowdata[i].Username
                        });
                    var clientId = $("#ddlClient option:selected").val();
                    var permissions = new Array();
                    $("#form-p-1 input[type=checkbox]:checked").each(function () {
                        permissions.push($(this).val());
                    });
                    $.ajax({
                        url: "/Administration/AddNewUsers",
                        type: "POST",
                        dataType: "json",
                        data: {
                            Users: sendData,
                            ClientId: clientId,
                            Permissions: permissions
                        },
                        success: function (result) {
                            if (result.Success) {
                                $("#popupEditor").modal("hide");
                                $('#tblUserList').DataTable().ajax.reload();
                            } else
                                alert(result.Message);
                        },
                        error: function () {
                            alert("Could not add new users");
                        }
                    });
                });

                $("#popupEditor").modal("show");

                CreateClientList("div#clients");

            });

            $('#popupEditor').on('hidden.bs.modal', function () {
                $("#tblNewUsers").DataTable().destroy();
                $("#form").steps("destroy");
            });

            $(".btn-closedialog").unbind("click");
            $(".btn-closedialog").bind("click", function () {
                $("#popupEditor").modal("hide");
            });

        });


        String.prototype.endsWith = function(suffix) {
            return this.indexOf(suffix, this.length - suffix.length) !== -1;
        };

        function CreateClientList(container, selectedId) {
            $.ajax({
                url: "/Administration/UserClientList",
                type: "POST",
                dataType: "json",
                success: function (items) {

                    $(container).html('<select data-placeholder="Choose a client..." class="chosen-select" style="width: 350px;" id="ddlClient" size="3"></select>');
                    $("#ddlClient").html("<option value=''>--- Not selected ---</option>");
                    for (i = 0; i < items.length; i++) {
                        selected = "";
                        if (!(selectedId === undefined))
                            if (selectedId == items[i].ID)
                                selected = ' selected="selected"';
                        $("#ddlClient").append('<option value="' + items[i].ID + '" type="' + items[i].Type + '"' + selected + '>' + items[i].Name + '</option>');
                    }
                    $("#ddlClient")
                        .chosen({ width: "100%" })
                        .change(function () {
                            if (this.selectedIndex > 0)
                                $(".btn-newnext").removeClass("disabled");
                            else
                                $(".btn-newnext").addClass("disabled");
                        });

                }
            });
        }


        function CSVToArray(strData, strDelimiter) {
            // Check to see if the delimiter is defined. If not,
            // then default to comma.
            strDelimiter = (strDelimiter || ",");

            // Create a regular expression to parse the CSV values.
            var objPattern = new RegExp(
                (
                    // Delimiters.
                    "(\\" + strDelimiter + "|\\r?\\n|\\r|^)" +

                    // Quoted fields.
                    "(?:\"([^\"]*(?:\"\"[^\"]*)*)\"|" +

                    // Standard fields.
                    "([^\"\\" + strDelimiter + "\\r\\n]*))"
                ),
                "gi"
                );


            // Create an array to hold our data. Give the array
            // a default empty first row.
            var arrData = [[]];

            // Create an array to hold our individual pattern
            // matching groups.
            var arrMatches = null;


            // Keep looping over the regular expression matches
            // until we can no longer find a match.
            while (arrMatches = objPattern.exec(strData)) {

                // Get the delimiter that was found.
                var strMatchedDelimiter = arrMatches[1];

                // Check to see if the given delimiter has a length
                // (is not the start of string) and if it matches
                // field delimiter. If id does not, then we know
                // that this delimiter is a row delimiter.
                if (
                    strMatchedDelimiter.length &&
                    strMatchedDelimiter !== strDelimiter
                    ) {

                    // Since we have reached a new row of data,
                    // add an empty row to our data array.
                    arrData.push([]);

                }

                var strMatchedValue;

                // Now that we have our delimiter out of the way,
                // let's check to see which kind of value we
                // captured (quoted or unquoted).
                if (arrMatches[2]) {

                    // We found a quoted value. When we capture
                    // this value, unescape any double quotes.
                    strMatchedValue = arrMatches[2].replace(
                        new RegExp("\"\"", "g"),
                        "\""
                        );

                } else {

                    // We found a non-quoted value.
                    strMatchedValue = arrMatches[3];

                }


                // Now that we have our value string, let's add
                // it to the data array.
                arrData[arrData.length - 1].push(strMatchedValue);
            }

            // Return the parsed data.
            return (arrData);
        }

        function AddNewUser(firstName, lastName, emailAddress, userName) {
            if (userName.length == 0)
                return;
            if ($(".btn-newsave").hasClass("disabled"))
                $(".btn-newsave").addClass("disabled");
            $("#tblNewUsers").DataTable().row.add({
                "FirstName": firstName,
                "LastName": lastName,
                "EmailAddress": emailAddress,
                "EmailAddressDisplay": emailAddress,
                "Username": userName,
                "UserDisplay": userName
            });

            $("#tblNewUsers").DataTable().draw(false);
            $(".btn-newsave").removeClass("disabled");
        }

        function VerifyUsernames() {
            var rowdata = $("#tblNewUsers").DataTable().data();
            var sendData = new Array();
            for (i = 0; i < rowdata.length; i++) {
                if (!/^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.test(rowdata[i].EmailAddress)) {
                    alert(rowdata[i].EmailAddress + " is not an email address");
                    rowdata[i].EmailAddressDisplay = "<a style='color:red; font-weight:bold'>" + rowdata[i].EmailAddress + "</a>";
                    $("#tblNewUsers").DataTable().rows().invalidate().draw();
                    return;
                }
                sendData.push(rowdata[i].Username);
                sendData.push(rowdata[i].EmailAddress);
            }
            $.ajax({
                url: "/Administration/VerifyUsernames",
                type: "POST",
                dataType: "json",
                data: { verification: sendData },
                success: function (failures) {
                    if (failures.length == 0) {
                        $(".btn-newsave").removeClass("disabled");
                        return;
                    }
                    for (i = 0; i < failures.length; i++)
                        for (j = 0; j < rowdata.length; j++) {
                            if (failures[i].toLowerCase() == rowdata[j].Username.toLowerCase()) {
                                rowdata[j].UserDisplay = "<a style='color:red; font-weight:bold'>" + rowdata[j].Username + "</a>";
                                $('#tblNewUsers').DataTable().row(j).remove().draw();
                            }
                            if (failures[i].toLowerCase() == rowdata[j].EmailAddress.toLowerCase()) {
                                rowdata[j].EmailAddressDisplay = "<a style='color:red; font-weight:bold'>" + rowdata[j].EmailAddress + "</a>";
                                $('#tblNewUsers').DataTable().row(i).remove().draw();
                            }
                        }
                    $("#tblNewUsers").DataTable().rows().invalidate().draw();
                    alert("Invalid/Taken usernames or email addresses found and marked in Red.");

                },
                error: function () {
                    alert("Cannot confirm usernames");
                }
            });
        }

        function AEDPopup(ID, AGE, firstName, lastName, emailAddress, username) {
            $("#popupEdit .modal-title").html(ID == "" ? "Add new User" : "Edit " + username)
            $("#ID").val(ID);
            $("#AGE").val(AGE);
            $("#editFirstName").val(firstName);
            $("#editLastName").val(lastName);
            $("#editEmailAddress").val(emailAddress);
            $("#editUsername").val(username);
            $("#popupEdit").modal("show");
        }

    </script>
}